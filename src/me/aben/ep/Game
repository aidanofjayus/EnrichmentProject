package main;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;

import javax.swing.JPanel;

import states.StateManager;

public class Game extends JPanel implements Runnable, KeyListener {

	private static final long serialVersionUID = 1L;

	public static final int WIDTH = 420;
	public static final int HEIGHT = 240;
	public static final int SCALE = 2;

	private Thread thread;
	private boolean running = false;
	private long targetTime = 1000 / 60;

	private BufferedImage image;
	private Graphics2D g;

	private StateManager stateManager;

	public Game() {
		super();
		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
		setFocusable(true);
		requestFocus();
	}

	public void addNotify() {
		super.addNotify();
		if (thread == null) {
			thread = new Thread(this);
			addKeyListener(this);
			thread.start();
		}
	}

	public void start() {
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		g = (Graphics2D) image.getGraphics();
		stateManager = new StateManager();
		running = true;
	}

	public void stop() {
		running = false;
		try {
			thread.join();
			System.out.println("Closing the enrichment project...");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		start();
		long start, elapsed, wait;
		while (running) {
			start = System.nanoTime();
			update();
			draw();
			render();
			elapsed = System.nanoTime() - start;
			wait = targetTime - elapsed / 1000000;
			if (wait < 0)
				wait = 0;
			try {
				Thread.sleep(wait);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	private void update() {
		stateManager.update();
	}

	private void draw() {
		stateManager.draw(g);
	}
	
	private void render() {
		Graphics g2 = getGraphics();
		g2.drawImage(image, 0, 0, WIDTH * SCALE, HEIGHT * SCALE, null);
		g2.dispose();
	}

	public void keyPressed(KeyEvent key) {
		stateManager.keyPressed(key.getKeyCode());
	}

	public void keyReleased(KeyEvent key) {
		//stateManager.keyReleased(key.getKeyCode());
	}

	public void keyTyped(KeyEvent key) {
		
	}

}
